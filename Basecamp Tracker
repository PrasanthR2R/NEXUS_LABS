/**
 * Sync Basecamp todos assigned to specific teams into a single sheet, including cleaned notes,
 * support marking tasks done from the sheet, and send Teams notifications.
 */
const BASECAMP_ACCOUNT_ID = '5796684';

// Teams webhook URL stored in Script Properties as TEAMS_WEBHOOK_URL
const TEAMS_WEBHOOK_URL = PropertiesService.getScriptProperties().getProperty('TEAMS_WEBHOOK_URL');

// Specify teams to include
const FILTER_TEAMS = [
  'Performance Team',
  'Digital Ads Dept.',
  'Creative'
];

/**
 * Send a plain-text notification to the Teams channel via webhook.
 */
function sendTeamsNotification(message) {
  if (!TEAMS_WEBHOOK_URL) return;
  try {
    UrlFetchApp.fetch(TEAMS_WEBHOOK_URL, {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify({ text: message })
    });
  } catch (e) {
    Logger.log(`Failed to send Teams notification: ${e}`);
  }
}

/**
 * Strip HTML tags and remove images from a string.
 */
function stripHtml(html) {
  if (!html) return '';
  const noImages = html.replace(/<img[^>]*>/gi, '');
  return noImages.replace(/<[^>]+>/g, ' ').replace(/\s+/g, ' ').trim();
}

/**
 * Main entry: fetch and write todos for FILTER_TEAMS.
 */
function syncTeamAssignedTasks() {
  const token = PropertiesService.getScriptProperties().getProperty('ACCESS_TOKEN');
  if (!token) throw new Error('ACCESS_TOKEN not found in Script Properties');

  const headers = {
    Authorization: 'Bearer ' + token,
    Accept: 'application/json',
    'User-Agent': 'Nexus Tickets Tracker (prasanth@ready2ridemobile.com)'
  };

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = getOrCreateSheet(ss, 'üßë‚Äçüíº Team Assigned Tasks');
  resetSheet(sheet, [
    'Project', 'Todoset', 'Todolist', 'Todo Item', 'Notes', 'Completed',
    'Assigned To', 'Created At', 'Due Date', 'Status', 'Item URL', 'Created By', 'Mark Done'
  ]);

  const statuses = [
    { label: 'active', url: `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/projects.json` },
    { label: 'archived', url: `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/projects.json?status=archived` },
    { label: 'trashed', url: `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/projects.json?status=trashed` }
  ];

  const rows = [];

  statuses.forEach(status => {
    let page = 1;
    while (true) {
      const pagedUrl = status.url.includes('?')
        ? `${status.url}&page=${page}`
        : `${status.url}?page=${page}`;
      const projects = fetchJSON(pagedUrl, headers);
      if (!projects || !projects.length) break;

      projects.forEach(project => {
        const projectName = project.name;
        const bucketId = project.id;
        const todosets = (project.dock || [])
          .filter(tool => tool.name === 'todoset' && tool.enabled && tool.url);

        todosets.forEach(tool => {
          const todosetData = fetchJSON(tool.url, headers);
          if (!todosetData || !todosetData.todolists_url) return;

          const lists = fetchJSON(todosetData.todolists_url, headers);
          if (!lists || !lists.length) return;

          lists.forEach(list => {
            const todosUrl = `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/buckets/${bucketId}/todolists/${list.id}/todos.json`;
            Utilities.sleep(200);
            const todos = fetchJSON(todosUrl, headers);
            if (!todos || !todos.length) return;

            todos.forEach(todo => {
              const names = (todo.assignees || []).map(p => p.name);
              if (!names.some(n => FILTER_TEAMS.includes(n))) return;

              rows.push([
                projectName,
                todosetData.name || '(Unnamed Todoset)',
                list.title,
                todo.content || '',
                stripHtml(todo.description),
                todo.completed ? '‚úÖ' : '‚ùå',
                names.join(', '),
                todo.created_at ? new Date(todo.created_at).toLocaleString() : '',
                todo.due_on || '',
                status.label,
                `https://3.basecamp.com/${BASECAMP_ACCOUNT_ID}/buckets/${bucketId}/todos/${todo.id}`,
                todo.creator?.name || '',
                false // initial Mark Done checkbox unchecked
              ]);
            });
          });
        });
      });
      page++;
    }
  });

  if (rows.length) {
    sheet.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
    const lastCol = rows[0].length;
    sheet.getRange(2, lastCol, rows.length).insertCheckboxes();
  }

  ss.toast('‚úÖ Team-assigned todos synced!', 'Basecamp Sync');
}

/**
 * Installable on-edit handler: when user checks 'Mark Done', mark the to-do completed via completion endpoint.
 */
function handleEdit(e) {
  const sheet = e.range.getSheet();
  if (sheet.getName() !== 'üßë‚Äçüíº Team Assigned Tasks') return;

  const markDoneCol = sheet.getLastColumn();
  if (e.range.getColumn() !== markDoneCol || e.value !== 'TRUE') return;

  const row = e.range.getRow();
  const itemUrl = sheet.getRange(row, 11).getValue();
  const [, bucketId, todoId] = itemUrl.match(/buckets\/(\d+)\/todos\/(\d+)/) || [];
  if (!bucketId || !todoId) return;

  const token = PropertiesService.getScriptProperties().getProperty('ACCESS_TOKEN');
  const completionUrl = `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/buckets/${bucketId}/todos/${todoId}/completion.json`;
  try {
    const res = UrlFetchApp.fetch(completionUrl, {
      method: 'post',
      headers: { Authorization: 'Bearer ' + token },
      muteHttpExceptions: true
    });
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    if (res.getResponseCode() === 204) {
      sheet.getRange(row, 6).setValue('‚úÖ');
      ss.toast('Task closed in Basecamp', 'Success');
      const title = sheet.getRange(row, 4).getValue();
      const user = Session.getActiveUser().getEmail();
      sendTeamsNotification(`‚úÖ *${title}* closed by ${user}.`);
    } else {
      throw new Error('HTTP ' + res.getResponseCode() + ': ' + res.getContentText());
    }
  } catch (err) {
    e.range.setValue(false);
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    ss.toast('Failed to close task: ' + err.message, 'Error');
  }
}

/**
 * Fetch JSON, return null on failure.
 */
function fetchJSON(url, headers) {
  try {
    const res = UrlFetchApp.fetch(url, { method: 'get', headers, muteHttpExceptions: true });
    if (res.getResponseCode() !== 200) return null;
    return JSON.parse(res.getContentText());
  } catch (e) {
    Logger.log(`Error fetching ${url}: ${e}`);
    return null;
  }
}

/**
 * Clear sheet and write header row.
 */
function resetSheet(sheet, headers) {
  sheet.clearContents();
  sheet.appendRow(headers);
  sheet.setFrozenRows(1);
}

/**
 * Get or create a sheet by name.
 */
function getOrCreateSheet(ss, name) {
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  return sh;
}
