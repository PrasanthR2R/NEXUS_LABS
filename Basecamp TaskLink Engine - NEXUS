// ========= üîß GLOBAL CONFIG ========= //
const BASECAMP_ACCOUNT_ID = '5796684';
const TEAMS_WEBHOOK_URL   = PropertiesService.getScriptProperties().getProperty('TEAMS_WEBHOOK_URL');
const WEBAPP_URL          = PropertiesService.getScriptProperties().getProperty('TEAMS_WEBHOOK_SECRET');
const ACCESS_TOKEN        = PropertiesService.getScriptProperties().getProperty('ACCESS_TOKEN');
const FILTER_TEAMS        = ['Performance Team','Digital Ads Dept.','Creative'];
 
// ========= üìì WRITE TO ENGINE LOG ========= //
function writeEngineLog(engineName, status, runtimeSeconds, error) {
  try {
    const ss = SpreadsheetApp.openById("18NPm8ZUkskHxTPqRrDrNTwlujlWDInJcHEVuPeJqSUg");
    const sheet = ss.getSheetByName("NEXUS_Engine_Health_Log");
    if (!sheet) return;
    const row = [
      engineName,
      new Date(),
      status,
      runtimeSeconds ? runtimeSeconds.toFixed(2) + 's' : '',
      error || ''
    ];
    sheet.appendRow(row);
  } catch (err) {
    console.error('Failed to log to Engine Health sheet:', err.message);
  }
}
 
// ========= üí¨ TEAMS CARDS ========= //
function sendCardToTeams(card) {
  if (!TEAMS_WEBHOOK_URL) return;
  const res = UrlFetchApp.fetch(TEAMS_WEBHOOK_URL, {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(card),
    muteHttpExceptions: true
  });
  console.log('Teams responded:', res.getResponseCode());
}
 
// ========= ‚öôÔ∏è HELPERS ========= //
function stripHtml(html) {
  return html
    ? html.replace(/<img[^>]*>/gi,'')
          .replace(/<[^>]+>/g,' ')
          .replace(/\s+/g,' ')
          .trim()
    : '';
}
function cachedFetchJSON(url, params = {}, context = '') {
  const key = Utilities.base64EncodeWebSafe(`${context}|${url}`);
  const cache = CacheService.getScriptCache();
  const hit = cache.get(key);
  if (hit) return JSON.parse(hit);
  const res = UrlFetchApp.fetch(url, Object.assign({muteHttpExceptions:true}, params));
  if (res.getResponseCode()!==200) return null;
  const body = res.getContentText();
  try { cache.put(key, body, 3*60*60); } catch(e){}
  return JSON.parse(body);
}
function getOrCreateSheet(ss, name) {
  let s = ss.getSheetByName(name);
  if (!s) s = ss.insertSheet(name);
  return s;
}
function resetSheet(sheet, headers) {
  sheet.clearContents();
  sheet.appendRow(headers);
  sheet.setFrozenRows(1);
}
 
// ========= ‚è≤ BASECAMP SYNC ========= //
function syncTeamAssignedTasks() {
  if (!ACCESS_TOKEN) throw new Error('ACCESS_TOKEN missing');
  const headers = { Authorization: 'Bearer ' + ACCESS_TOKEN, Accept: 'application/json' };
  const ss      = SpreadsheetApp.getActiveSpreadsheet();
  const sheet   = getOrCreateSheet(ss, 'üßë‚Äçüíº Team Assigned Tasks');
  const headerRow = [
    'Project','Todoset','Todolist','Todo Item','Notes','Completed','Assigned To',
    'Created At','Due Date','Status','Item URL','Created By','Mark Done',
    'Last Comment','Add Comment','Post Comment'
  ];
  resetSheet(sheet, headerRow);
  const statuses = [
    {label:'active',   url:`https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/projects.json`},
    {label:'archived', url:`https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/projects.json?status=archived`},
    {label:'trashed',  url:`https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/projects.json?status=trashed`}
  ];
  statuses.forEach(st => {
    let page = 1;
    while (true) {
      const url   = st.url + (st.url.includes('?') ? `&page=${page}` : `?page=${page}`);
      const projs = cachedFetchJSON(url, {method:'get', headers}, `projects_${st.label}_page_${page}`);
      if (!projs?.length) break;
      projs.forEach(proj => {
        const pname = proj.name, bid = proj.id;
        (proj.dock||[]).filter(t=>t.name==='todoset'&&t.enabled).forEach(tool=>{
          const td = cachedFetchJSON(tool.url, {headers}, `todoset_${bid}`);
          if (!td?.todolists_url) return;
          cachedFetchJSON(td.todolists_url, {headers}, `todolists_${bid}`).forEach(list=>{
            Utilities.sleep(200);
            const todosUrl = `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/buckets/${bid}/todolists/${list.id}/todos.json`;
            (cachedFetchJSON(todosUrl, {headers}, `todos_${list.id}`)||[]).forEach(todo=>{
              const names = (todo.assignees||[]).map(a=>a.name);
              if (!names.some(n=>FILTER_TEAMS.includes(n))) return;
              const todoDetailsUrl = `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/buckets/${bid}/todos/${todo.id}.json`;
              const todoDetails = cachedFetchJSON(todoDetailsUrl, {headers}, `todo_${todo.id}`);
              const commentsUrl = todoDetails?.comments_url;
              let lastComment = '';
              if (commentsUrl) {
                const comments = cachedFetchJSON(commentsUrl, {headers}, `comments_${todo.id}`) || [];
                lastComment = comments.length ? stripHtml(comments[comments.length-1].content) : '';
              }
              const row = [
                pname,
                td.name||'(Unnamed)',
                list.title,
                todo.content||'',
                stripHtml(todo.description),
                todo.completed?'‚úÖ':'‚ùå',
                names.join(', '),
                todo.created_at?new Date(todo.created_at).toLocaleString():'',
                todo.due_on||'',
                st.label,
                `https://3.basecamp.com/${BASECAMP_ACCOUNT_ID}/buckets/${bid}/todos/${todo.id}`,
                todo.creator?.name||'',
                false,
                lastComment,
                '',
                false
              ];
              sheet.appendRow(row);
              const rowIndex = sheet.getLastRow();
              sheet.getRange(rowIndex, 13).insertCheckboxes();
              sheet.getRange(rowIndex, 16).insertCheckboxes();
            });
          });
        });
      });
      page++;
    }
  });
  ss.toast('‚úÖ Synced assigned todos','Basecamp Sync');
}
 
// ========= üö© UPDATE PENDING REPLIES SHEET ========= //
function updatePendingRepliesSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const mainSheet = ss.getSheetByName('üßë‚Äçüíº Team Assigned Tasks');
  const pendingSheet = ss.getSheetByName('Pending Replies');
  if (!mainSheet || !pendingSheet) return;
  const data = mainSheet.getDataRange().getValues();
  const header = data.shift();
  const tz = ss.getSpreadsheetTimeZone();
  const today = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');
  const colIdx = name => header.indexOf(name);
  const projectI = colIdx('Project');
  const todosetI = colIdx('Todoset');
  const todolistI = colIdx('Todolist');
  const todoItemI = colIdx('Todo Item');
  const notesI = colIdx('Notes');
  const completedI = colIdx('Completed');
  const assignedToI = colIdx('Assigned To');
  const itemUrlI = colIdx('Item URL');
  const lastCommentI = colIdx('Last Comment');
  const pendingRows = [];
  const headers = ['Project','Todoset','Todolist','Todo Item','Notes','Completed','Assigned To','Item URL'];

  data.forEach(row => {
    const itemUrl = row[itemUrlI];
    if (!itemUrl) return;
    // Extract bucket and todo id from URL
    const bidMatch = itemUrl.match(/buckets\/(\d+)/);
    const todoIdMatch = itemUrl.match(/todos\/(\d+)/);
    if (!bidMatch || !todoIdMatch) return;
    const bid = bidMatch[1];
    const todoId = todoIdMatch[1];
    // Fetch comments for this todo
    const commentsUrl = `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/buckets/${bid}/todos/${todoId}/comments.json`;
    const comments = cachedFetchJSON(commentsUrl, {headers: {Authorization: 'Bearer ' + ACCESS_TOKEN}}, `comments_${todoId}`) || [];
    // Check if any comment is from today
    const hasTodayComment = comments.some(c => {
      if (!c.created_at) return false;
      const commentDate = Utilities.formatDate(new Date(c.created_at), tz, 'yyyy-MM-dd');
      return commentDate === today;
    });
    if (!hasTodayComment) {
      pendingRows.push([
        row[projectI],
        row[todosetI],
        row[todolistI],
        row[todoItemI],
        row[notesI],
        row[completedI],
        row[assignedToI],
        row[itemUrlI]
      ]);
    }
  });
  // Write to Pending Replies sheet
  pendingSheet.clearContents();
  pendingSheet.appendRow(headers);
  if (pendingRows.length) {
    pendingSheet.getRange(2, 1, pendingRows.length, headers.length).setValues(pendingRows);
  }
}
 
// ===== 1. Mark Done Handler (from handleEdit) =====
function handleEdit(e) {
  const sh = e.range.getSheet();
  if (sh.getName()!=='üßë‚Äçüíº Team Assigned Tasks') return;
  const markDoneCol = 13;
  if (e.range.getColumn() !== markDoneCol) return;

  const checked = e.value === 'TRUE', row = e.range.getRow();
  const url     = sh.getRange(row,11).getValue();
  const bidMatch     = url.match(/buckets\/(\d+)/);
  const todoIdMatch  = url.match(/todos\/(\d+)/);
  if (!bidMatch || !todoIdMatch) return;
  const bid = bidMatch[1];
  const todoId = todoIdMatch[1];
  const method  = checked ? 'post' : 'delete';
  const apiUrl  = `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/buckets/${bid}/todos/${todoId}/completion.json`;

  try {
    const res = UrlFetchApp.fetch(apiUrl, {
      method,
      headers: {Authorization:'Bearer '+ACCESS_TOKEN},
      muteHttpExceptions:true
    });
    if (res.getResponseCode()===204) {
      sh.getRange(row,6).setValue(checked?'‚úÖ':'‚ùå');
      const title = sh.getRange(row,4).getValue();
      const user  = Session.getActiveUser().getEmail()||'someone';
      sendCardToTeams({
        "@type":"MessageCard","@context":"http://schema.org/extensions",
        summary:"Task Update",
        themeColor: checked?"00FF00":"FFA500",
        title: checked?`‚úÖ ${title} closed`:`üîÑ ${title} reopened`,
        text: `*${title}* was ${checked?'closed':'reopened'} by **${user}**.`
      });
      CacheService.getScriptCache().remove(Utilities.base64EncodeWebSafe(`todos|${url}`));
    } else {
      throw new Error('HTTP '+res.getResponseCode());
    }
  } catch(err) {
    e.range.setValue(!checked);
    SpreadsheetApp.getActiveSpreadsheet().toast('Error: '+err.message,'Error');
  }
}

// ===== 2. Morning Digest =====
function sendMorningDigest() {
  const ss    = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('üßë‚Äçüíº Team Assigned Tasks');
  if (!sheet) throw new Error('Tasks sheet not found');

  const data   = sheet.getDataRange().getValues();
  const header = data.shift();
  const i      = name=>header.indexOf(name);
  const cI     = i('Created At'), dI = i('Due Date'),
        pI     = i('Project'),    tI = i('Todo Item'),
        uI     = i('Item URL');
  const tz    = ss.getSpreadsheetTimeZone();
  const today = Utilities.formatDate(new Date(),tz,'yyyy-MM-dd');
  const yest  = Utilities.formatDate(new Date(Date.now()-864e5),tz,'yyyy-MM-dd');
  const map   = getDealerManagerMap();
  const groups = {};

  data.forEach(r=>{
    const created = r[cI] instanceof Date
                  ? Utilities.formatDate(r[cI],tz,'yyyy-MM-dd') : '';
    const due     = r[dI] instanceof Date
                  ? Utilities.formatDate(r[dI],tz,'yyyy-MM-dd') : r[dI];
    let mgr = 'Team';
    map.forEach(m=>{ if (r[pI].includes(m.dealerPattern)) mgr = m.manager; });
    if ([today,yest].includes(created) || due===today) {
      groups[mgr] = groups[mgr]||[];
      groups[mgr].push({
        title:   r[tI],
        url:     r[uI],
        project: r[pI],
        ticketId:r[uI].split('/').pop()
      });
    }
  });
  if (!Object.keys(groups).length) return;

  const sections = Object.entries(groups).map(([mgr,tickets])=>({
    activityTitle:`**@${mgr}**`,
    facts: tickets.map(t=>({
      name:`‚Ä¢ ${t.title}`,
      value:`_${t.project}_ ‚Ä¢ [View](${t.url})`
    })),
    markdown:true
  }));
  const inputChoices = Object.values(groups).flat().map(t=>({
    "@type":"TextChoice",
    display:`${t.title} (${t.project})`,
    value:t.ticketId
  }));

  const card = {
    "@type":"MessageCard","@context":"http://schema.org/extensions",
    summary:"Morning Digest", themeColor:"0076D7",
    title:`üåû Morning Digest (${yest} & ${today})`,
    sections,
    potentialAction:[
      {
        "@type":"ActionCard", name:"I‚Äôm On It",
        inputs:[{
          "@type":"MultichoiceInput", id:"ticketId",
          title:"Select the ticket you‚Äôre on:", isMultiSelect:false,
          choices: inputChoices
        }],
        actions:[{
          "@type":"HttpPOST", name:"Submit",
          target: WEBAPP_URL,
          body:   "ticketId={{ticketId.value}}"
        }]
      },
      {
        "@type":"OpenUri", name:"Open Tracker Sheet",
        targets:[{os:"default",uri:ss.getUrl()}]
      }
    ]
  };

  sendCardToTeams(card);
}

// ===== 3. End-of-Day Reminder =====
function sendEODReminder() {
  const ss    = SpreadsheetApp.getActiveSpreadsheet();
  const sh    = ss.getSheetByName('üßë‚Äçüíº Team Assigned Tasks');
  if (!sh) throw new Error('Tasks sheet not found');

  const data   = sh.getDataRange().getValues();
  const hdr    = data.shift();
  const i      = name=>hdr.indexOf(name);
  const dueI   = i('Due Date'), doneI = i('Completed');
  const titleI = i('Todo Item'), urlI = i('Item URL');
  const tz     = ss.getSpreadsheetTimeZone();
  const today  = Utilities.formatDate(new Date(),tz,'yyyy-MM-dd');

  const pending = data.filter(r=>{
    const due = r[dueI] instanceof Date
              ? Utilities.formatDate(r[dueI],tz,'yyyy-MM-dd') : r[dueI];
    return due===today && r[doneI]!=='‚úÖ';
  });
  if (!pending.length) return;

  const bullets = pending.map(r=>`‚Ä¢ [${r[titleI]}](${r[urlI]})`).join('\n');
  sendCardToTeams({
    "@type":"MessageCard","@context":"http://schema.org/extensions",
    summary:"EOD Reminder", themeColor:"FFA500",
    title:`‚è∞ End-of-Day Reminder (${today})`,
    text: bullets
  });
}

// ===== 4. Sync ‚Üí Digest =====
function syncThenDigest() {
  syncTeamAssignedTasks();
  sendMorningDigest();
}

// ===== 5. Web-App Handlers =====
function doGet() {
  return ContentService.createTextOutput('OK')
                       .setMimeType(ContentService.MimeType.TEXT);
}

function doPost(e) {
  // merge JSON + form params
  let payload = {};
  if (e.postData && e.postData.type==='application/json') {
    payload = JSON.parse(e.postData.contents);
  }
  payload = Object.assign({}, payload, e.parameter);
  console.log('Payload:', payload);

  if (payload.ticketId) {
    const ss    = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName('üßë‚Äçüíº Team Assigned Tasks');
    const data  = sheet.getDataRange().getValues();
    const header = data.shift();

    // ensure ‚ÄúTeam Response‚Äù column exists
    let respCol = header.indexOf('Team Response');
    if (respCol < 0) {
      respCol = header.length;
      sheet.insertColumnAfter(respCol);
      sheet.getRange(1, respCol+1).setValue('Team Response');
    }

    // find matching row by ticketId
    const urlCol = header.indexOf('Item URL');
    const user   = Session.getActiveUser().getEmail() || 'someone';
    const stamp  = new Date().toLocaleString();
    for (let i = 0; i < data.length; i++) {
      if (`${data[i][urlCol]}`.endsWith('/'+payload.ticketId)) {
        sheet.getRange(i+2, respCol+1)
             .setValue(`I‚Äôm On It by ${user} @ ${stamp}`);
        break;
      }
    }
    return ContentService.createTextOutput('OK')
                         .setMimeType(ContentService.MimeType.TEXT);
  }

  // fallback: post new Basecamp ticket to Teams
  try {
    const title   = payload.content || payload.title;
    const project = payload.bucket?.name;
    const url     = payload.app_url;
    const creator = payload.creator?.name;
    sendCardToTeams({
      "@type":"MessageCard","@context":"http://schema.org/extensions",
      summary:"New Ticket", themeColor:"00CCFF",
      title:`üÜï New Ticket: ${title}`,
      text:`**Project:** ${project}\n**Created by:** ${creator}`,
      potentialAction:[{
        "@type":"OpenUri", name:"View in Basecamp",
        targets:[{os:"default",uri:url}]
      }]
    });
    return ContentService.createTextOutput('OK');
  } catch(err) {
    console.error(err);
    return ContentService.createTextOutput('Error').setStatusCode(500);
  }
}

// ===== 6. Config reader =====
function getDealerManagerMap() {
  const ss  = SpreadsheetApp.getActiveSpreadsheet();
  const cfg = ss.getSheetByName('Config');
  if (!cfg) throw new Error('Config sheet not found');
  const data = cfg.getRange(2,1,cfg.getLastRow()-1,2).getValues();
  return data
    .filter(r=>r[0]&&r[1])
    .map(r=>({ dealerPattern:r[0].toString().trim(), manager:r[1].toString().trim() }));
}

// ===== 7. Engine runner =====
function runBasecampTrackerEngine() {
  const start = Date.now();
  const ENGINE = "Basecamp TaskLink Engine - NEXUS";

  try {
    syncTeamAssignedTasks();
    sendMorningDigest();
    writeEngineLog(ENGINE, "OK", (Date.now() - start) / 1000, "");
  } catch (err) {
    writeEngineLog(ENGINE, "ERROR", (Date.now() - start) / 1000, err.message);
    throw err;
  }
}

// ===== 8. Token refresher =====
function refreshBasecampAccessToken() {
  const CLIENT_ID     = '6b4c8ea31ab4e4d8c5dfc59cf3804eb525141a7c';
  const CLIENT_SECRET = '3380f74a6d975a2caefe83c8530e70c14a63ee16';
  const REFRESH_TOKEN = PropertiesService.getScriptProperties().getProperty('REFRESH_TOKEN');

  if (!REFRESH_TOKEN) {
    Logger.log('‚ùå No refresh token found.');
    return;
  }

  const payload = {
    type: 'refresh',
    client_id: CLIENT_ID,
    client_secret: CLIENT_SECRET,
    refresh_token: REFRESH_TOKEN
  };

  const options = {
    method: 'post',
    contentType: 'application/x-www-form-urlencoded',
    payload: payload,
    muteHttpExceptions: true
  };

  const url = 'https://launchpad.37signals.com/authorization/token';
  const res = UrlFetchApp.fetch(url, options);
  const code = res.getResponseCode();
  const body = res.getContentText();

  Logger.log('Refresh Response Code: ' + code);
  Logger.log('Refresh Response Body: ' + body);

  const now = new Date();
  const logSS = SpreadsheetApp.openById('18NPm8ZUkskHxTPqRrDrNTwlujlWDInJcHEVuPeJqSUg');
  const logSheet = logSS.getSheetByName('NEXUS_Engine_Health_Log');

  if (code === 200) {
    const data = JSON.parse(body);
    const expiresAt = new Date(now.getTime() + data.expires_in * 1000);

    PropertiesService.getScriptProperties().setProperty('ACCESS_TOKEN', data.access_token);
    if (data.refresh_token) {
      PropertiesService.getScriptProperties().setProperty('REFRESH_TOKEN', data.refresh_token);
    }
    PropertiesService.getScriptProperties().setProperty('EXPIRES_AT', expiresAt.toISOString());

    // Log to NEXUS_Engine_Health_Log
    logSheet.appendRow([
      'Basecamp Token Engine',
      now,
      'OK',
      '',
      `Token refreshed. Expires at: ${expiresAt.toLocaleString()}`
    ]);

    SpreadsheetApp.getActiveSpreadsheet().toast('‚úÖ Token refreshed successfully', 'Basecamp');
  } else {
    // Log failure
    logSheet.appendRow([
      'Basecamp Token Engine',
      now,
      'ERROR',
      '',
      `Refresh failed: ${body}`
    ]);
    SpreadsheetApp.getActiveSpreadsheet().toast('‚ùå Token refresh failed: ' + body, 'Error');
  }
}

// ===== 9. Unified onEdit handler =====
function onEdit(e) {
  // Add Comment logic (from original)
  const sh = e.range.getSheet();
  if (sh.getName() === 'üßë‚Äçüíº Team Assigned Tasks') {
    const col = e.range.getColumn();
    const row = e.range.getRow();
    // Post Comment logic
    if (col === 16 && e.value === 'TRUE') {
      const comment = sh.getRange(row, 15).getValue();
      const itemUrl = sh.getRange(row, 11).getValue();
      const currentStatus = sh.getRange(row, 16).getValue();
      if (typeof currentStatus === 'string' && currentStatus.startsWith('‚úÖ')) return;
      if (!comment || !itemUrl) {
        sh.getRange(row, 16).setValue(false);
        SpreadsheetApp.getActiveSpreadsheet().toast('‚ö†Ô∏è Missing comment or item URL', 'Error');
        return;
      }
      const bidMatch = itemUrl.match(/buckets\/(\d+)/);
      const todoIdMatch = itemUrl.match(/todos\/(\d+)/);
      if (!bidMatch || !todoIdMatch) {
        sh.getRange(row, 16).setValue(false);
        SpreadsheetApp.getActiveSpreadsheet().toast('‚ö†Ô∏è Invalid URL format', 'Error');
        return;
      }
      const bid = bidMatch[1];
      const todoId = todoIdMatch[1];
      const apiUrl = `https://3.basecampapi.com/${BASECAMP_ACCOUNT_ID}/buckets/${bid}/recordings/${todoId}/comments.json`;
      sh.getRange(row, 16).setValue('‚è≥ Posting...');
      let success = false;
      try {
        const response = UrlFetchApp.fetch(apiUrl, {
          method: 'post',
          headers: {
            'Authorization': 'Bearer ' + ACCESS_TOKEN,
            'Content-Type': 'application/json'
          },
          payload: JSON.stringify({ content: comment }),
          muteHttpExceptions: true
        });
        const code = response.getResponseCode();
        const body = response.getContentText();
        if (code === 201) {
          const stamp = `‚úÖ ${new Date().toLocaleString()}`;
          sh.getRange(row, 16).setValue(stamp);
          SpreadsheetApp.getActiveSpreadsheet().toast('‚úÖ Comment posted successfully!', 'Basecamp');
          success = true;
        } else {
          sh.getRange(row, 16).setValue(false);
          SpreadsheetApp.getActiveSpreadsheet().toast(`‚ùå Basecamp Error: ${body}`, 'Error');
        }
      } catch (err) {
        if (!success) {
          sh.getRange(row, 16).setValue(false);
          SpreadsheetApp.getActiveSpreadsheet().toast(`‚ùå Exception: ${err.message}`, 'Error');
        }
      }
      SpreadsheetApp.flush();
    }
    // Mark Done logic (reuse handleEdit)
    if (col === 13) {
      handleEdit(e);
    }
  }
}
