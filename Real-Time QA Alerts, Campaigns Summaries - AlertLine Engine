// === CONFIGURATION ===
const SHEET_ID          = '15x5f84i8vvovzFBD4JYQA-5Y2hcxD4XeMcgNdj8fN4g';
const SHEET_NAME        = 'Print Campaigns - On Going';
const SHEET_URL         = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/edit#gid=1689384763`;
const TEAMS_WEBHOOK_URL = 'https://clictechnologies.webhook.office.com/webhookb2/d1d4f6f7-5378-4d2d-ba87-aedba03b3585@a4e69a77-1b2a-432a-b01b-19ce339290cc/IncomingWebhook/df2321c58e5040698060aef988751815/67cddb26-ab0c-4458-9ab3-9d33d615642b/V2l5uS0W25X-svMs9EkN9CcCdGtehqgHh-Z4HUoNiFiis1';

// === MAIN FUNCTION ===
function onEdit(e) {
  try {
    const sheet = e.source.getSheetByName(SHEET_NAME);
    if (!sheet) return;

    const editedRow = e.range.getRow();
    const headers = sheet.getDataRange().getValues()[0].map(h => h.toString().trim().toLowerCase());

    const colStatus     = headers.indexOf('current status');
    const colQAedBy     = headers.indexOf('qa resource');
    const colDev        = headers.indexOf('assigned dev');
    const colCampID     = headers.indexOf('campaign_id');
    const colCampName   = headers.indexOf('campaign name');
    const colDealer     = headers.indexOf('dealer name');
    const colQAComment  = headers.indexOf('qa comments');
    const colDevComment = headers.indexOf('developer comments');
    const colLastNoti   = headers.indexOf('last notified status');

    if ([colStatus, colQAedBy, colDev, colCampID, colCampName, colDealer, colQAComment, colLastNoti].some(i => i < 0)) {
      console.error('‚ùå One or more required columns are missing.');
      return;
    }

    const row = sheet.getRange(editedRow, 1, 1, headers.length).getValues()[0];
    let qaStatus     = (row[colStatus] || '').toString().trim();
    const qaBy       = (row[colQAedBy] || 'None').toString().trim();
    let dev          = (row[colDev] || 'None').toString().trim();
    const campId     = (row[colCampID] || 'N/A').toString().trim();
    const campName   = (row[colCampName] || 'Unnamed Campaign').toString().trim();
    const dealer     = (row[colDealer] || 'Unknown Dealer').toString().trim();
    const comment    = (row[colQAComment] || 'No QA comment provided').toString().trim();
    const devComment = (row[colDevComment] || '').toString().trim();
    const prevNotified = (row[colLastNoti] || '').toString().trim();

    // üîÅ Prevent duplicate alerts for same status
    if (qaStatus === prevNotified) return;

    const devNeededStatuses = ['has issues', 'needs discussion'];
    const needsDev = devNeededStatuses.includes(qaStatus.toLowerCase());

    // Auto-clear Dev if status doesn't need it
    if (!needsDev && dev.toLowerCase() !== 'none') {
      sheet.getRange(editedRow, colDev + 1).setValue('None');
      dev = 'None';
    }

    const qaFilled  = qaBy.toLowerCase() !== 'none' && qaBy !== '';
    const devFilled = dev.toLowerCase() !== 'none' && dev !== '';

    let shouldNotify = false;
    let cardColor = '999999';
    let cardTitle = `Campaign Update ‚Äì ${campName}`;
    let cardBody = [
      { name: 'üÜî Campaign ID:', value: campId },
      { name: 'üì® Campaign Name:', value: campName },
      { name: 'üè™ Dealer:', value: dealer },
      { name: 'üéØ QA Status:', value: qaStatus },
      { name: "üïµÔ∏è QA'ed By:", value: qaBy }
    ];

    if (devFilled) {
      cardBody.push({ name: 'üë®‚Äçüíª Assigned Dev', value: dev });
    }

    const statusLower = qaStatus.toLowerCase();

    switch (statusLower) {
      case 'has issues':
        if (qaFilled && devFilled && comment !== '') {
          shouldNotify = true;
          cardColor = 'FF0000';
          cardTitle = `üõë Issue Detected In ‚Äú${campName}‚Äù ‚Äì Needs DEV Attention!`;
          cardBody.push({ name: 'üìù QA Comment', value: comment });
        }
        break;

      case 'needs discussion':
        if (qaFilled && devFilled) {
          shouldNotify = true;
          cardColor = 'D93F0B';
          cardTitle = `üí¨ Discussion Needed On ‚Äú${campName}‚Äù ‚Äì Inputs Awaited`;
        }
        break;

      case 'resolved':
        if (qaFilled && !devFilled) {
          shouldNotify = true;
          cardColor = '28A745';
          cardTitle = `‚úÖ Resolved: ‚Äú${campName}‚Äù Is Good To Go`;
        }
        break;

      case 'not an issue':
        if (qaFilled && !devFilled) {
          shouldNotify = true;
          cardColor = '888888';
          cardTitle = `üëå Cleared: ‚Äú${campName}‚Äù Needs No Further Action`;
        }
        break;

      case 'good to approve':
        if (qaFilled && !devFilled) {
          shouldNotify = true;
          cardColor = '0078D7';
          cardTitle = `üìù All Checks Passed ‚Äì ‚Äú${campName}‚Äù Ready For Approval`;
        }
        break;

      case 'approved':
        if (qaFilled && !devFilled) {
          shouldNotify = true;
          cardColor = '00B14F';
          cardTitle = `üíØ Approved: ‚Äú${campName}‚Äù Is Now Deployment-Ready`;
        }
        break;
    }

    if (shouldNotify) {
      if (devComment) {
        cardBody.push({ name: 'üí¨ Developer Comment', value: devComment });
      }

      const card = {
        "@type": "MessageCard",
        "@context": "https://schema.org/extensions",
        "summary": cardTitle,
        "themeColor": cardColor,
        "title": cardTitle,
        "sections": [{ facts: cardBody, markdown: true }],
        "potentialAction": [{
          "@type": "OpenUri",
          "name": "üìÑ View Sheet",
          "targets": [{ "os": "default", "uri": SHEET_URL }]
        }]
      };

      UrlFetchApp.fetch(TEAMS_WEBHOOK_URL, {
        method: 'post',
        contentType: 'application/json',
        payload: JSON.stringify(card)
      });

      // ‚úÖ Update Last Notified to avoid duplicate alerts
      sheet.getRange(editedRow, colLastNoti + 1).setValue(qaStatus);

    } else {
      // ‚ùå Didn‚Äôt meet all conditions? Revert status to avoid accidental triggers
      sheet.getRange(editedRow, colStatus + 1).setValue(prevNotified);
    }

  } catch (err) {
    console.error("üö® Script Error:", err);
  }
}

 
function sendQASummaryToTeams() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Print Campaigns - On Going");
  const data = sheet.getDataRange().getValues();
  const headers = data[0].map(h => h.toString().trim());
 
  const approved = [];
  const discuss = [];
  const waiting = [];
 
  const normalize = str => str.replace(/[\u2018\u2019]/g, "'").trim().toLowerCase();
  const getColumnIndex = (colName) =>
    headers.findIndex(h => normalize(h) === normalize(colName));
 
  const statusCol = getColumnIndex('Current Status');
  const nameCol = getColumnIndex('Campaign Name'); 
  const dealerCol = getColumnIndex('Dealer Name');
  const qaByCol = getColumnIndex('QA Resource');

 
  if (statusCol === -1 || nameCol === -1 || dealerCol === -1 || qaByCol === -1) {
    Logger.log("‚ùå One or more required columns not found.");
    Logger.log("Headers available: " + JSON.stringify(headers));
    return;
  }
 
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const status = row[statusCol] || "";
    const name = row[nameCol] || "";
    const dealer = row[dealerCol] || "";
    const qaBy = row[qaByCol] || "N/A";
 
    if (!name) continue;
 
    const formatted = `${name} ‚Äì ${dealer} (QA‚Äôed by ${qaBy})`;
    const statusLower = status.toString().trim().toLowerCase();
 
    if (statusLower === 'approved') {
      approved.push(formatted);
    } else if (statusLower === 'needs discussion') {
      discuss.push(formatted);
    } else if (statusLower === 'waiting for approval') {
      waiting.push(formatted);
    }
  }
 
  const today = new Date();
  const formattedDate = Utilities.formatDate(today, Session.getScriptTimeZone(), "MMMM dd, yyyy");
 
  const lines = [];
 
  // Intro
  lines.push(`<strong>üì¢ Hey Everyone, Here's The Quick Daily Campaign QA Summary ‚Äì ${formattedDate}</strong>`);
  lines.push("<br><br>");
 
  // Approved Section
  if (approved.length) {
    lines.push(`<div style="text-align:left;"><span>‚úÖ</span> <strong>Total Approved Campaigns (${approved.length}):</strong></div>`);
    approved.forEach((item, index) => {
      lines.push(`<div style="text-align:left;">${index + 1}. ${item}</div>`);
    });
    lines.push("<br>");
  }
 
  // Needs Discussion
  if (discuss.length) {
    lines.push(`<div style="text-align:left;"><span>üí¨</span> <strong>Needs Discussion (${discuss.length}):</strong></div>`);
    discuss.forEach((item, index) => {
      lines.push(`<div style="text-align:left;">${index + 1}. ${item}</div>`);
    });
    lines.push("<br>");
  }
 
  // Waiting for Approval
  if (waiting.length) {
    lines.push(`<div style="text-align:left;"><span>‚è≥</span> <strong>Waiting for Approval (${waiting.length}):</strong></div>`);
    waiting.forEach((item, index) => {
      lines.push(`<div style="text-align:left;">${index + 1}. ${item}</div>`);
    });
    lines.push("<br>");
  }
 
  // Footer
  lines.push("<br><br>");
  lines.push(`<div style="color:#0078D7; text-align:left;"><em>This is an auto-generated summary. Brought to you by the <strong>NEXUS</strong> Engine.</em></div>`);
 
  const message = {
    "@type": "MessageCard",
    "@context": "http://schema.org/extensions",
    "themeColor": "0076D7",
    "summary": "Daily QA Summary",
    "sections": [
      {
        "text": lines.join("\n")
      }
    ]
  };
 
  const webhookUrl = "https://clictechnologies.webhook.office.com/webhookb2/d1d4f6f7-5378-4d2d-ba87-aedba03b3585@a4e69a77-1b2a-432a-b01b-19ce339290cc/IncomingWebhook/df2321c58e5040698060aef988751815/67cddb26-ab0c-4458-9ab3-9d33d615642b/V2l5uS0W25X-svMs9EkN9CcCdGtehqgHh-Z4HUoNiFiis1";
 
  const options = {
    method: "POST",
    contentType: "application/json",
    payload: JSON.stringify(message)
  };
 
  UrlFetchApp.fetch(webhookUrl, options);
}
 
